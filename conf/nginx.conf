worker_processes  1;
error_log /var/log/nginx/error.log error;
events {
    worker_connections 1024;
}
# openresty -c  conf/nginx.conf -p ./

http {

#lua_package_path "/home/vagrant/lua-resty-logger-socket/lib/?.lua;;";
#lua_package_path "$prefix/lua/?.lua;/blash/?.lua;;";
#lua_package_path "$prefix/lua/?.lua;/blash/?.lua;;";
    lua_package_path "/home/vagrant/Code/luaproject/luademo/lua/?.lua;;";
    lua_code_cache off;
    server {
        listen 6699;
        access_log /var/log/nginx/access.log;
        
        location /hello_world {
            default_type text/html;
            content_by_lua_block {
                ngx.say("Hello World")
            }
        }

        location = /sum {
            internal;
            content_by_lua_block {
                local args = ngx.req.get_uri_args()
                    ngx.say(tonumber(args.a) + tonumber(args.b))
            }
        }
        location /sub {
            internal;
            content_by_lua_block {
                local args = ngx.req.get_uri_args()
                ngx.print(tonumber(args.a) + tonumber(args.b))
            }

        }

        location = /subduction {
            internal;
            content_by_lua_block{
                ngx.sleep(0.1)
                local args = ngx.req.get_uri_args()
                ngx.print(tonumber(args.a) - tonumber(args.b))
            }
        }

        location = /app/test_parallels {
            content_by_lua_block {
                local start_time = ngx.now()
                local res1, res2 = ngx.location.capture_multi ({
                    {"/sum", {args={a=8,b=8}}},
                    {"/subduction", {args={a=3,b=8}}}
                })
                ngx.say("status:", res1.status, "response:", res1.body)
                ngx.say("status:", res2.status, "response:", res2.body)
                ngx.say("time used:",ngx.now() - start_time)
            }
        }

        location = /app/test_queue {
            content_by_lua_block {
                local start_time = ngx.now()
                local res1= ngx.location.capture_multi ({
                    {"/sum", {args={a=1,b=8}}},
                })

                local res2= ngx.location.capture_multi ({
                    {"/subduction", {args={a=1,b=8}}},
                })
                ngx.say("status:", res1.status, "response:", res1.body)
                ngx.say("status:", res2.status, "response:", res2.body)
                ngx.say("time used:",ngx.now() - start_time)
            }
        }
        location = /app/test {
            content_by_lua_block {
                local res = ngx.location.capture(
                    "/sum", {args={a=3,b=8}}
                )
                ngx.say("status:", res.status, "response:", res.body)
            }
        }

        location ~ ^/static/([-_a-zA-Z0-9]+).jpg} {
            set $image_name $1;
            content_by_lua_block {
                ngx.exec("/download_internal/images", .. ngx.var.image_name .. ".jpg");
            }
        }
        
        location /download_internal {
            internal;

            alias ../download;
        }

        location = /foo {
            content_by_lua_block {
                ngx.say([[I am foo]])
            }
        }

        location = / {
            rewrite_by_lua_block {
                return ngx.redirect("/foo")
            }
        }

        location /print_param {
            content_by_lua_block {
                local arg = ngx.req.get_uri_args()
                for k, v in pairs(arg) do
                    ngx.say("[GET ] key:", k, " v:", v)
                end

                ngx.req.read_body()

                local arg = ngx.req.get_post_args()

                for k, v in pairs(arg) do
                    ngx.say("[POST ] key:", k, " v:", v)
                end

            }
        }

        location = /test {
            content_by_lua_block {
                local res = ngx.location.capture(
                                '/print_param',
                                {
                                    method = ngx.HTTP_POST,
                                    args = ngx.encode_args({a=1 ,b='2&'}),
                                    body = ngx.encode_args({c=3, d='4&'})
                                }
                            )
                ngx.say(res.body)

            }
        }

        location = /test1 {
            content_by_lua_block {
                local res = ngx.location.capture(
                                '/print_param',
                                {
                                    method = ngx.HTTP_POST,
                                    args ="a=1&b=2%26&g=1",
                                    body = 'c=3&d=4%26'
                                }
                            )
                ngx.say(res.body)

            }
        }

#lua_need_request_body on;
        client_body_in_file_only on;
        client_body_temp_path /tmp/;
        location /test3 {
            content_by_lua_block{
                ngx.req.read_body()
                local data = ngx.req.get_body_data()
                ngx.say("Hello ", data)
            }
        }

        location /test4 {
            content_by_lua_block{
                function getFile(file_name)
                    local f = assert(io.open(file_name, "r"))
                    local string = f:read("*all")
                    f.close()
                    return string
                end
                ngx.req.read_body()
                local data = ngx.req.get_body_data()
                if nil == data then
                    local file_name = ngx.req.get_body_file()
                    ngx.say(">> temp file: ", file_name)
                    if file_name then
                        data = getFile(file_name)
                    end
                end
                ngx.say("Hello ", data)
            }
        }
# use the http command to test http -f   "localhost:6699/print_param?a=1&b=" hello=world



        location /say1 {
            content_by_lua_block {
                ngx.say("hello")
                ngx.sleep(3)
                ngx.say(" the world")
            }
        }
        location /say2 {
            content_by_lua_block {
                ngx.say("hello")
                ngx.flush()
                ngx.sleep(3)
                ngx.say(" the world")
            }
        }

        location /chunk {
            content_by_lua_block {
                local file, err = io.open(ngx.config.prefix() .. "data.db", "r")
                if not file then
                    ngx.log(ngx.ERR, "open file error:", err)
                    ngx.exit(ngx.HTTP_SERVICE_UNAVAILABLE)
                end

                local data
                while true do
                    data = file:read(1024)
                    if nil == data then
                        break
                    end

                    ngx.print(data)
                    ngx.flush(true)
                end
                file:close()
            }
        }

        location = /print {
            content_by_lua_block {
                local table = {
                    "hello, ",
                    {
                        "world",
                        true,
                        " or ",
                        false,
                        {
                            ": ", nil
                        }
                    }
                }
                ngx.print(table)

            }
        }

        location /logs {
            content_by_lua_block {
                local num = 55
                local str = "string"
                local obj
                ngx.log(ngx.ERR, "num: ", num)
                ngx.log(ngx.INFO, " string: ", str)
                print([[i am print]])
                ngx.log(ngx.ERR, "object: ", obj)
            }
        }

#        location / {
#            log_by_lua '
#                local logger = require "resty.logger.socket"
#                if not logger.initted() then
#                    local ok, err = logger.init{
#                        host = "localhost",
#                        port = 1234,
#                        flush_limit = 1234,
#                        drop_limit = 5678,
#
#                    }
#
#                    if not ok then
#                        ngx.log(ngx.ERR, "failed to initialized the logger :", err)
#                        return
#                    end
#                end
#
#                -- construct the custom access log message in 
#                -- the lua variable "msg"
#
#                local bytes, err = logger.log(msg)
#                if err then
#                    ngx.log(ngx.ERR, "failed to log message: ", err)
#                    return
#                end
#
#            ';
#
#        }

#        location /addition {
#            content_by_lua_block{
#                local args = ngx.req.get_uri_args()
#                ngx.say(args.a + args.b)
#            }
#        }
#
#        location /subtraction {
#            content_by_lua_block{
#                local args = ngx.req.get_uri_args()
#                ngx.say(args.a - args.b)
#            }
#        }
#
#        location /multiplication {
#            content_by_lua_block{
#                local args = ngx.req.get_uri_args()
#                ngx.say(args.a * args.b)
#            }
#        }
#
#        location /division {
#            content_by_lua_block{
#                local args = ngx.req.get_uri_args()
#                ngx.say(args.a / args.b)
#            }
#        }
#
        location ~ ^/api/([-a-zA-Z0-9/]+) {
            access_by_lua_file lua/access_check.lua;
            content_by_lua_file lua/$1.lua;
        }

        location /sum2 {
            content_by_lua_block{
                local a = tonumber(ngx.var.arg_a) or 0
                local b = tonumber(ngx.var.arg_b) or 0
                ngx.say("sum: ", a + b)
            }
        }

        location /firewall {

            access_by_lua_block{
                local black_ups = {["127.0.0.1"]=true}
                local ip = ngx.var.remote_addr
                if true == black_ups[ip] then
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                end
            }


            content_by_lua_block {
                local a = tonumber(ngx.var.arg_a) or 0
                local b = tonumber(ngx.var.arg_b) or 0
                ngx.say("sum: ", a + b)
            }

        }
        location /download {
            access_by_lua_block {
                ngx.var.limit_rate = 1000;
            }
        }

        location  /foo1 {
            content_by_lua_block {
                res = ngx.location.capture("/bar1");
            }
        }

        location  /main {
            echo_location_async /sub2;
            echo world;
        }
        location  /main2 {
            echo_location_async /sub2;
            echo world;
        }
        location  /sub2 {
            echo hello;
        }

        location /bar1 {
            echo_location /blah;
        }

        location /blah {
            echo "Success!";
        }


#不同阶段共享变量
        location /share_variable/test {
            rewrite_by_lua_block {
                ngx.ctx.foo = 56
            }
            access_by_lua_block {
                ngx.ctx.foo = ngx.ctx.foo + 3
            }

            content_by_lua_block {
                ngx.say(ngx.ctx.foo)
            }
        }
       
        location /share_variable/sub {
            content_by_lua_block {
                ngx.say("sub pre: " ,ngx.ctx.blah)
                ngx.ctx.blah = 32
                ngx.say("sub post :", ngx.ctx.blah)

            }
        }

        location /share_variable/main {
            content_by_lua_block {
                ngx.ctx.blah = 73
                ngx.say("main pre: ", ngx.ctx.blah)
                local res = ngx.location.capture("/share_variable/sub")
                ngx.print(res.body)
                ngx.say("main post: ", ngx.ctx.blah)
            }
        }
    }

}
