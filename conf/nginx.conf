worker_processes  1;
error_log /var/log/nginx/error.log error;
events {
    worker_connections 1024;
}
# openresty -c  conf/nginx.conf -p ./

http {
init_worker_by_lua_block {
    local delay = 3
    local new_timer = ngx.timer.at
    local log = ngx.log
    local ERR = ngx.ERR
    local check

    check = function (premature) 
        if not premature then
            local ok, err = new_timer(delay, check)
            if not ok then
                log(ERR< "failed to create timer: ", err)
                return
            end
        end
    end

    if 0 == ngx.worker.id() then
        local ok, err = new_timer(delay, check)
        if not ok then
            log(ERR, "failed to create timer: ", err)
            return
        end

    end


}
upstream md5_server {
    server 127.0.0.1:81;
    keepalive 20;
}
#lua_package_path "/home/vagrant/lua-resty-logger-socket/lib/?.lua;;";
#lua_package_path "$prefix/lua/?.lua;/blash/?.lua;;";
#lua_package_path "$prefix/lua/?.lua;/blash/?.lua;;";
# git clone https://github.com/ledgetech/lua-resty-http.git
#lua_package_path "/home/vagrant/lua-resty-http/lib/?.lua;;";

    lua_package_path "/home/vagrant/Code/luaproject/luademo/lua/?.lua;;";
    lua_code_cache off;
    lua_shared_dict my_cache 128m;
    lua_shared_dict limit_conn_store 100M;
    server {
        rewrite_log on;
        listen 6699;
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error_log debug;
        
        location /hello_world {
            default_type text/html;
            content_by_lua_block {
                ngx.say("Hello World")
            }
        }

        location = /sum {
            internal;
            content_by_lua_block {
                local args = ngx.req.get_uri_args()
                    ngx.say(tonumber(args.a) + tonumber(args.b))
            }
        }
        location /sub {
            internal;
            content_by_lua_block {
                local args = ngx.req.get_uri_args()
                ngx.print(tonumber(args.a) + tonumber(args.b))
            }

        }

        location = /subduction {
            internal;
            content_by_lua_block{
                ngx.sleep(0.1)
                local args = ngx.req.get_uri_args()
                ngx.print(tonumber(args.a) - tonumber(args.b))
            }
        }

        location = /app/test_parallels {
            content_by_lua_block {
                local start_time = ngx.now()
                local res1, res2 = ngx.location.capture_multi ({
                    {"/sum", {args={a=8,b=8}}},
                    {"/subduction", {args={a=3,b=8}}}
                })
                ngx.say("status:", res1.status, "response:", res1.body)
                ngx.say("status:", res2.status, "response:", res2.body)
                ngx.say("time used:",ngx.now() - start_time)
            }
        }

        location = /app/test_queue {
            content_by_lua_block {
                local start_time = ngx.now()
                local res1= ngx.location.capture_multi ({
                    {"/sum", {args={a=1,b=8}}},
                })

                local res2= ngx.location.capture_multi ({
                    {"/subduction", {args={a=1,b=8}}},
                })
                ngx.say("status:", res1.status, "response:", res1.body)
                ngx.say("status:", res2.status, "response:", res2.body)
                ngx.say("time used:",ngx.now() - start_time)
            }
        }
        location = /app/test {
            content_by_lua_block {
                local res = ngx.location.capture(
                    "/sum", {args={a=3,b=8}}
                )
                ngx.say("status:", res.status, "response:", res.body)
            }
        }

        location ~ ^/static/([-_a-zA-Z0-9]+).jpg} {
            set $image_name $1;
            content_by_lua_block {
                ngx.exec("/download_internal/images", .. ngx.var.image_name .. ".jpg");
            }
        }
        
        location /download_internal {
            internal;

            alias ../download;
        }

        location = /foo {
            content_by_lua_block {
                ngx.say([[I am foo]])
            }
        }

        location = / {
            rewrite_by_lua_block {
                return ngx.redirect("/foo")
            }
        }

        location /print_param {
            content_by_lua_block {
                local arg = ngx.req.get_uri_args()
                for k, v in pairs(arg) do
                    ngx.say("[GET ] key:", k, " v:", v)
                end

                ngx.req.read_body()

                local arg = ngx.req.get_post_args()

                for k, v in pairs(arg) do
                    ngx.say("[POST ] key:", k, " v:", v)
                end

            }
        }

        location = /test {
            content_by_lua_block {
                local res = ngx.location.capture(
                                '/print_param',
                                {
                                    method = ngx.HTTP_POST,
                                    args = ngx.encode_args({a=1 ,b='2&'}),
                                    body = ngx.encode_args({c=3, d='4&'})
                                }
                            )
                ngx.say(res.body)

            }
        }

        location = /test1 {
            content_by_lua_block {
                local res = ngx.location.capture(
                                '/print_param',
                                {
                                    method = ngx.HTTP_POST,
                                    args ="a=1&b=2%26&g=1",
                                    body = 'c=3&d=4%26'
                                }
                            )
                ngx.say(res.body)

            }
        }

#lua_need_request_body on;
        client_body_in_file_only on;
        client_body_temp_path /tmp/;
        location /test3 {
            content_by_lua_block{
                ngx.req.read_body()
                local data = ngx.req.get_body_data()
                ngx.say("Hello ", data)
            }
        }

        location /test4 {
            content_by_lua_block{
                function getFile(file_name)
                    local f = assert(io.open(file_name, "r"))
                    local string = f:read("*all")
                    f.close()
                    return string
                end
                ngx.req.read_body()
                local data = ngx.req.get_body_data()
                if nil == data then
                    local file_name = ngx.req.get_body_file()
                    ngx.say(">> temp file: ", file_name)
                    if file_name then
                        data = getFile(file_name)
                    end
                end
                ngx.say("Hello ", data)
            }
        }
# use the http command to test http -f   "localhost:6699/print_param?a=1&b=" hello=world



        location /say1 {
            content_by_lua_block {
                ngx.say("hello")
                ngx.sleep(3)
                ngx.say(" the world")
            }
        }
        location /say2 {
            content_by_lua_block {
                ngx.say("hello")
                ngx.flush()
                ngx.sleep(3)
                ngx.say(" the world")
            }
        }

        location /chunk {
            content_by_lua_block {
                local file, err = io.open(ngx.config.prefix() .. "data.db", "r")
                if not file then
                    ngx.log(ngx.ERR, "open file error:", err)
                    ngx.exit(ngx.HTTP_SERVICE_UNAVAILABLE)
                end

                local data
                while true do
                    data = file:read(1024)
                    if nil == data then
                        break
                    end

                    ngx.print(data)
                    ngx.flush(true)
                end
                file:close()
            }
        }

        location = /print {
            content_by_lua_block {
                local table = {
                    "hello, ",
                    {
                        "world",
                        true,
                        " or ",
                        false,
                        {
                            ": ", nil
                        }
                    }
                }
                ngx.print(table)

            }
        }

        location /logs {
            content_by_lua_block {
                local num = 55
                local str = "string"
                local obj
                ngx.log(ngx.ERR, "num: ", num)
                ngx.log(ngx.INFO, " string: ", str)
                print([[i am print]])
                ngx.log(ngx.ERR, "object: ", obj)
            }
        }

#        location / {
#            log_by_lua '
#                local logger = require "resty.logger.socket"
#                if not logger.initted() then
#                    local ok, err = logger.init{
#                        host = "localhost",
#                        port = 1234,
#                        flush_limit = 1234,
#                        drop_limit = 5678,
#
#                    }
#
#                    if not ok then
#                        ngx.log(ngx.ERR, "failed to initialized the logger :", err)
#                        return
#                    end
#                end
#
#                -- construct the custom access log message in 
#                -- the lua variable "msg"
#
#                local bytes, err = logger.log(msg)
#                if err then
#                    ngx.log(ngx.ERR, "failed to log message: ", err)
#                    return
#                end
#
#            ';
#
#        }

#        location /addition {
#            content_by_lua_block{
#                local args = ngx.req.get_uri_args()
#                ngx.say(args.a + args.b)
#            }
#        }
#
#        location /subtraction {
#            content_by_lua_block{
#                local args = ngx.req.get_uri_args()
#                ngx.say(args.a - args.b)
#            }
#        }
#
#        location /multiplication {
#            content_by_lua_block{
#                local args = ngx.req.get_uri_args()
#                ngx.say(args.a * args.b)
#            }
#        }
#
#        location /division {
#            content_by_lua_block{
#                local args = ngx.req.get_uri_args()
#                ngx.say(args.a / args.b)
#            }
#        }
#
        location ~ ^/api/([-a-zA-Z0-9/]+) {
            access_by_lua_file lua/access_check.lua;
            content_by_lua_file lua/$1.lua;
        }

        location /sum2 {
            content_by_lua_block{
                local a = tonumber(ngx.var.arg_a) or 0
                local b = tonumber(ngx.var.arg_b) or 0
                ngx.say("sum: ", a + b)
            }
        }

        location /firewall {

            access_by_lua_block{
                local black_ups = {["127.0.0.1"]=true}
                local ip = ngx.var.remote_addr
                if true == black_ups[ip] then
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                end
            }


            content_by_lua_block {
                local a = tonumber(ngx.var.arg_a) or 0
                local b = tonumber(ngx.var.arg_b) or 0
                ngx.say("sum: ", a + b)
            }

        }
        location /download {
            access_by_lua_block {
                ngx.var.limit_rate = 1000;
            }
        }

        location  /foo1 {
            content_by_lua_block {
                res = ngx.location.capture("/bar1");
            }
        }

        location  /main {
            echo_location_async /sub2;
            echo world;
        }
        location  /main2 {
            echo_location_async /sub2;
            echo world;
        }
        location  /sub2 {
            echo hello;
        }

        location /bar1 {
            echo_location /blah;
        }

        location /blah {
            echo "Success!";
        }


#不同阶段共享变量
        location /share_variable/test {
            rewrite_by_lua_block {
                ngx.ctx.foo = 56
            }
            access_by_lua_block {
                ngx.ctx.foo = ngx.ctx.foo + 3
            }

            content_by_lua_block {
                ngx.say(ngx.ctx.foo)
            }
        }
       
        location /share_variable/sub {
            content_by_lua_block {
                ngx.say("sub pre: " ,ngx.ctx.blah)
                ngx.ctx.blah = 32
                ngx.say("sub post :", ngx.ctx.blah)

            }
        }

        location /share_variable/main {
            content_by_lua_block {
                ngx.ctx.blah = 73
                ngx.say("main pre: ", ngx.ctx.blah)
                local res = ngx.location.capture("/share_variable/sub")
                ngx.print(res.body)
                ngx.say("main post: ", ngx.ctx.blah)
            }
        }

#sql注入
        location /sql_injection {
            content_by_lua_file lua/sql.lua;
        }
#通过proxy_pass发起http 请求
        location /md5_request {
            content_by_lua_block {
                ngx.req.read_body()
                local args, err = ngx.req.get_uri_args()
                ngx.log(ngx.ERR, " args: key: ", args.key)
                ngx.log(ngx.ERR, " args: body: ", args.data)

                local res = ngx.location.capture("/spe_md5", {
                    method = ngx.HTTP_POST,
                    body = args.data
                })
  
                  if 200 ~= res.status then
                      ngx.exit(res.status)
                  end
  
                  if args.key == res.body then
                      ngx.say("valid request")
                  else
                      ngx.say("invalid request!" .. args.key ..  "  <-> " .. res.body)
                  end
            }
        }

        location /spe_md5 {
            proxy_pass http://md5_server;

# for HTTP, the proxy_http_version directive should be set to "1.1" and the "Connection"
# header field should be cleared. (from http://ngx.org/en/docs/http/ngx_http.upstream
#module.html#keepalive)

            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

#cosocket 示例
        location /cosocket {
            content_by_lua_block {
                ngx.req.read_body()
                local args, err = ngx.req.get_uri_args()

                local http = require "resty.http"
                local httpc = http.new()
                local res, err = httpc:request_uri(
                    "http://127.0.0.1:81/spe_md5", 
                    {
                        method = "POST",
                        body = args.data,
                    }
                )
                if 200 ~= res.status then
                    ngx.exit(res.status)
                end

                if args.key == res.body then
                    ngx.say("valid request")
                else 
                    ngx.say("invalid request")
                end

            }
        }

    location /redis {
        content_by_lua_block{
            local redis = require "resty.redis"
            local red = redis:new()
            red:set_timeout(1000)

            local ok, err = red:connect("127.0.0.1", 6379)

            if not ok then
                ngx.say("failed to connect : ", err)
                return
            end

            local count

            count, err = red:get_reused_times()

            if 0 == count then
                ok, err = red:auth("password")
                if not ok then
                    ngx.say("failed to auth: ", err)
                    return
                end
            elseif err then
                ngx.say("failed to get reused times: ", err)
                return
            end

            ok, err = red:set("dog", "an animal")

            if not ok then 
                ngx.say("failed to set dog: ", err)
                return
            end

            ngx.say("set result:", ok)

            -- 连接澉大小是100个，并且设置最大的空闲时间是10秒
            local ok, err = red:set_keepalive(10000, 100)
            if not ok then
                ngx.say("failed to set keepalive: ", err)
                return
            end
        }

    }

    location /select_redis {
        content_by_lua_block {
            local redis = require "resty.redis"
            local red = redis:new()
            red:set_timeout(1000)
            
            --local ok, err = red:connect("unix:/path/to/redis.sock")

            local ok, err = red:connect("127.0.0.1", 6379)

            if not ok then
                ngx.say("failed to connect : ", err)
                return
            end

            os, err = red:select(1)

            if not ok then
                ngx.say("failed to select db: ", err)
                return
            end
            
            ngx.say("select result: ", ok)


            local ok, err = red:set_keepalive(10000, 100)

            if not ok then
                ngx.say("failed to set keepalive: ", err)
                return
            end

        }

    }


# json解析

    location /json {
        content_by_lua_block {
            local decode = require("cjson").decode
            function json_decode( str ) 
                local ok, t = pcall(decode, str)
                if not ok then
                    return nil
                end
                return t
            end

            local str = [[ {"key:"value"} ]]
            local t = json_decode( str )
            ngx.say("result: ", type(t))
                
        }

    }

    location /json_safe {
        content_by_lua_block {
            local json = require("cjson.safe")
            local str = [[ {"key:"value"} ]]

            local t = json.decode(str)
            if t then
                ngx.say("result: ", type(t))
            else
                ngx.say("parse error! invalide json string!")
            end
        }
    } 
    location /json_array {
        content_by_lua_block {
            local json = require("cjson")
            local data = {1,2}
            --data[1000] = 99
            --data[1000] = 99
            data[5] = 99
            ngx.say(json.encode(data))
            --ngx.say(json.encode_sparse_array(data))
            --convert, ratio, safe = json.encode_sparse_array()
            --ngx.say(convert , ratio, safe)


        }
    }

    location /json_object {
        content_by_lua_block {
            local json = require("cjson")
            local data = {dog={}}
            ngx.say(json.encode({}))
            ngx.say(json.encode(data))

            json.encode_empty_table_as_object(false)
            ngx.say(json.encode({}))
            ngx.say(json.encode(data))

            json.encode_sparse_array(true)

            local function _json_encode(data)
                return json.encode(data)
            end

            function json_encode(data, encode_empty_table_as_object)
                json.encode_empty_table_as_object(encode_empty_table_as_object or false)
                local ok, json_value = pcall(_json_encode, data)
                if not ok then
                    return  ok
                end
                return json_value
            end

            ngx.say(json_encode({}))

        }
    }
#postgre TODO
    
#执行阶段

    location  /mixed {
        set_by_lua_block $a {
            ngx.log(ngx.ERR, "set_by_lua_block*")
        }

        rewrite_by_lua_block {
            ngx.log(ngx.ERR, "rewrite_by_lua_block*")
        }

        access_by_lua_block {
            ngx.log(ngx.ERR, "access_by_lua_block*")
        }

        content_by_lua_block {
            ngx.log(ngx.ERR, "content_by_lua_block*")
        }

        header_filter_by_lua_block {
            ngx.log(ngx.ERR, "header_filter_by_lua_block*")
        }

        body_filter_by_lua_block {
            ngx.log(ngx.ERR, "body_filter_by_lua_block*")
        }

        log_by_lua_block {
            ngx.log(ngx.ERR, "log_by_lua_block*")
        }
    }

    location /log_content {
        rewrite_by_lua_block {
            ngx.say("foo = ", ngx.ctx.foo)
                ngx.ctx.foo = 78
        }

        access_by_lua_block {
            ngx.ctx.foo = ngx.ctx.foo + 3
        }

        content_by_lua_block {
            ngx.say(ngx.ctx.foo)
        }
        log_by_lua_block {
            ngx.log(ngx.ERR, "log_by_lua_block*, foo = " .. ngx.ctx.foo)
        }
    }

    #动态加载代码
    location ~ '^/lua/(\w+(?:\/\w+)*)$' {
        content_by_lua_file $1;
    }
    # http localhost/lua/a/a
    
    location /ip_deny {
        deny 127.0.0.1;
        allow 192.168.1.0/24;
        allow 10.0.0.0/24;
        deny all;
    }

    #location /geo_deny {
    #    geo $country {
    #        default ZH;
    #    }
    #}

    location /non-block {
        content_by_lua_block {
            ngx.sloop(0.1)
            ngx.say("ok")
        }
    }

    location /get_lua {
        content_by_lua_block {
            local key = "test"
            local cache = require "cache"
            local value = cache:get_from_cache(key)
            ngx.say(value)
        }
    }

    location /set_lua {
        content_by_lua_block {
            local key = "test"
            local value = "value"
            local cache = require "cache"
            local result = cache:set_to_cache(key, value ,10000)
            ngx.say(result)
        }

    }
    location /limit_rate {
        access_by_lua_block {
            ngx.var.limit_rate = "3000K"
        }
    }

    location /limit_by_lua_resty_limit_traffic {
        access_by_lua_file src/access.lua;
        content_by_lua_file src/content.lua;
        log_by_lua_file  src/log.lua;
    }

    location /cosocket2 {
        resolver 114.114.114.114;
        content_by_lua_block {
            local sock = ngx.socket.tcp()
            local ok, err = sock:connect("www.baidu.com", 80)
            if not ok then
                ngx.say("failed to connect to baidu: ", err)
                return
            end

            local req_data = "GET / HTTP/1.1\r\nHost: www.baidu.com\r\n\r\n"
            local bytes, err = sock:send(req_data)
            if err then
                ngx.say("failed to send to baidu: ", err)
                return
            end

            local data, err, partial = sock:receive()
            if err then
                ngx.say("Failed to receive from baidu: ", err)
                return
            end

            sock:close()

            ngx.say("successfully talk to baidu! response first line: ", data)


        }

    }

}

server {
    listen 81;
    location /spe_md5 {
        content_by_lua_block {
            ngx.req.read_body()
            local data  = ngx.req.get_body_data()
            --ngx.print(ngx.md5(data .. "*&^$#$^&kjtrKUYG"))
            ngx.log(ngx.ERR, " spe_md5: body: ", data)
            ngx.print(ngx.md5(data .. "*&^$#$^&kjtrKUYG"))

        }
    }
}

    #lua_package_path "/path-to-lua-resty-dns/lib/?llua;;";

server {
    listen 6698;
    location = /dns {
        lua_socket_log_errors on;
        content_by_lua_block {
            local resolver = require "resty.dns.resolver"

            local r, err =resolver:new {
                nameservers = {"114.114.114.114"},
                retrans = 5, 
                timeout = 2000,
            }


            if not r then
                ngx.say("failed to instantiate the resolver: ", err)
                return
            end

            local answers , err, tries  = r.query("www.baidu.com", nil, {})
            if not answers then
                ngx.say("failed to query the DNS server : ", err)
                --ngx.say("retry histories: \n ", table.concat(tries, "\n "))
                return
            end

            if answers.errcode then
                ngx.say("server returned error code: ", answers.errcode, ":", answers.errstr)
                return
            end


            for i, ans in ipairs(answers) do
                ngx.say(ans.name, " " ,ans.address or ans.cname, 
                        " type:", ans.type, " class:", ans.class
                        " ttl:", ans.ttl)
            end




        }
    }
    
}

server {
    listen 443 ssl;
    server_name test.com;

    ssl_certificate fake.crt;
    ssl_certificate_key fake.key;

    ssl_certificate_by_lua_block {
        local ssl = require "ngx.ssl"

        local ok, err = ssl.clear_certs()

        if not ok then
            ngx.log(ngx.ERR, "failed to clear existing (fallback) certificates")
            return ngx.exit(ngx.ERR)
        end

        local cert_data, err = get_my_pem_cert_data()
        if not cert_data then
            ngx.log(ng.xERR, "failed to get PEM cert: ", err)
            return
        end


        local cert, err = ssl.parse_pem_cert(cert_data)

        if not cert then
            ngx.log(ngx.ERR, "failed to parse PEM cert: ", err)
            return
        end

        local ok, err = ssl.set_cert(cert)

        if not ok then
            ngx.log(ngx.ERR,"failed to set cert: " ,err)
            return

        end

        local pkey_data, err = get_my_pem_priv_key_data()

        if not pkey_data then
            ngx.log(ngx.ERR, "failed to get DER private key: ", err)
            return
        end

        local pkey, err = ssl.parse_pem_priv_key(pkey_data)

        if not pkey then
            ngx.log(ngx.ERR, "failed to parse PEM key: " ,err)
            return

        end

        local ok, err = ssl.set_priv_key(pkey)

        if not ok then
            ngx.log(ngx.ERR, "failed to set private key: " ,err)
            return

        end






    }

    
}


# redis模块 TODO 

}
