worker_processes  1;
error_log /var/log/nginx/error.log;
events {
    worker_connections 1024;
}
# openresty -c  conf/nginx.conf -p ./

http {
    server {
        listen 6699;
        location / {
            default_type text/html;
            content_by_lua_block {
                ngx.say("Hello World")
            }
        }

        location = /sum {
            internal;
            content_by_lua_block {
                local args = ngx.req.get_uri_args()
                    ngx.say(tonumber(args.a) + tonumber(args.b))
            }
        }
        location /sub {
            internal;
            content_by_lua_block {
                local args = ngx.req.get_uri_args()
                ngx.print(tonumber(args.a) + tonumber(args.b))
            }

        }

        location = /subduction {
            internal;
            content_by_lua_block{
                ngx.sleep(0.1)
                local args = ngx.req.get_uri_args()
                ngx.print(tonumber(args.a) - tonumber(args.b))
            }
        }

        location = /app/test_parallels {
            content_by_lua_block {
                local start_time = ngx.now()
                local res1, res2 = ngx.location.capture_multi ({
                    {"/sum", {args={a=8,b=8}}},
                    {"/subduction", {args={a=3,b=8}}}
                })
                ngx.say("status:", res1.status, "response:", res1.body)
                ngx.say("status:", res2.status, "response:", res2.body)
                ngx.say("time used:",ngx.now() - start_time)
            }
        }

        location = /app/test_queue {
            content_by_lua_block {
                local start_time = ngx.now()
                local res1= ngx.location.capture_multi ({
                    {"/sum", {args={a=1,b=8}}},
                })

                local res2= ngx.location.capture_multi ({
                    {"/subduction", {args={a=1,b=8}}},
                })
                ngx.say("status:", res1.status, "response:", res1.body)
                ngx.say("status:", res2.status, "response:", res2.body)
                ngx.say("time used:",ngx.now() - start_time)
            }
        }
        location = /app/test {
            content_by_lua_block {
                local res = ngx.location.capture(
                    "/sum", {args={a=3,b=8}}
                )
                ngx.say("status:", res.status, "response:", res.body)
            }
        }

        location ~ ^/static/([-_a-zA-Z0-9]+).jpg} {
            set $image_name $1;
            content_by_lua_block {
                ngx.exec("/download_internal/images", .. ngx.var.image_name .. ".jpg");
            }
        }
        
        location /download_internal {
            internal;

            alias ../download;
        }

        location = /foo {
            content_by_lua_block {
                ngx.say([[I am foo]])
            }
        }

        location = / {
            rewrite_by_lua_block {
                return ngx.redirect("/foo")
            }
        }

        location /print_param {
            content_by_lua_block {
                local arg = ngx.req.get_uri_args()
                for k, v in pairs(arg) do
                    ngx.say("[GET ] key:", k, " v:", v)
                end

                ngx.req.read_body()

                local arg = ngx.req.get_post_args()

                for k, v in pairs(arg) do
                    ngx.say("[POST ] key:", k, " v:", v)
                end

            }
        }

        location = /test {
            content_by_lua_block {
                local res = ngx.location.capture(
                                '/print_param',
                                {
                                    method = ngx.HTTP_POST,
                                    args = ngx.encode_args({a=1 ,b='2&'}),
                                    body = ngx.encode_args({c=3, d='4&'})
                                }
                            )
                ngx.say(res.body)

            }
        }

        location = /test1 {
            content_by_lua_block {
                local res = ngx.location.capture(
                                '/print_param',
                                {
                                    method = ngx.HTTP_POST,
                                    args ="a=1&b=2%26&g=1",
                                    body = 'c=3&d=4%26'
                                }
                            )
                ngx.say(res.body)

            }
        }

#lua_need_request_body on;
    client_body_in_file_only on;
    client_body_temp_path /tmp/;
        location /test3 {
            content_by_lua_block{
                ngx.req.read_body()
                local data = ngx.req.get_body_data()
                ngx.say("Hello ", data)
            }
        }

        location /test4 {
            content_by_lua_block{
                function getFile(file_name)
                    local f = assert(io.open(file_name, "r"))
                    local string = f:read("*all")
                    f.close()
                    return string
                end
                ngx.req.read_body()
                local data = ngx.req.get_body_data()
                if nil == data then
                    local file_name = ngx.req.get_body_file()
                    ngx.say(">> temp file: ", file_name)
                    if file_name then
                        data = getFile(file_name)
                    end
                end
                ngx.say("Hello ", data)
            }
        }
# use the http command to test http -f   "localhost:6699/print_param?a=1&b=" hello=world


    }
}
